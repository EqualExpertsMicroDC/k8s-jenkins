---
apiVersion: v1
kind: Namespace
metadata:
  name: jenkins
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: jenkins
  namespace: jenkins
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: jenkins-master
      annotations:
        iam.amazonaws.com/role: jenkins-access
    spec:
      serviceAccountName: jenkins
      automountServiceAccountToken: true
      containers:
        - name: jenkins-master
          image: microdc/k8s-jenkins:2.2.3
          ports:
            - containerPort: 8080
            - containerPort: 50000
          readinessProbe:
            httpGet:
              path: /login
              port: 8080
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 2
            failureThreshold: 5
          livenessProbe:
            timeoutSeconds: 10
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 300
          env:
            - name: JAVA_OPTS
              value: '-Xmx1400m'
          volumeMounts:
            - mountPath: /var/jenkins_home
              name: jenkins-home
            - mountPath: "/var/jenkins_home/.ssh"
              name: jenkins-ssh-config
              readOnly: true
            - mountPath: "/usr/share/jenkins/data"
              name: jenkins-git-repos
            - mountPath: /var/run/docker.sock
              name: docker-sock-volume
          resources:
            limits:
              cpu: 500m
              memory: 1500Mi
            requests:
              cpu: 500m
              memory: 1500Mi
      volumes:
        - name: jenkins-home
          emptyDir: {}
        - name: jenkins-ssh-config
          secret:
            secretName: jenkins-ssh-config
        - name: jenkins-git-repos
          configMap:
            name: jenkins-git-repos
            items:
              - key: repos.txt
                path: repos.txt
        - name: docker-sock-volume
          hostPath:
            path: /var/run/docker.sock
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: jenkins-slave
  namespace: jenkins
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: jenkins-slave
      annotations:
        iam.amazonaws.com/role: jenkins-access
    spec:
      serviceAccountName: jenkins
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: name
                    operator: In
                    values:
                      - jenkins-slave
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: jenkins-slave
          image: microdc/jenkins-auto-jnlp-slave:1.0.1
          env:
            - name: JAVA_OPTS
              value: '-Xmx1400m'
            - name: JENKINS_URL
              value: 'http://jenkins:8080'
            - name: JENKINS_AUTH
              value: 'registrator:sdfkjh73234kjhsdf123123asfdasd'
            - name: JENKINS_SLAVE_NUM_EXECUTORS
              value: '2'
          volumeMounts:
            - mountPath: /var/jenkins_home
              name: jenkins-home
            - mountPath: "/var/jenkins_home/.ssh"
              name: jenkins-ssh-config
              readOnly: true
            - mountPath: /var/run/docker.sock
              name: docker-sock-volume
          resources:
            limits:
              cpu: 500m
              memory: 1500Mi
            requests:
              cpu: 500m
              memory: 1500Mi
      volumes:
        - name: jenkins-home
          emptyDir: {}
        - name: jenkins-ssh-config
          secret:
            secretName: jenkins-ssh-config
        - name: docker-sock-volume
          hostPath:
            path: /var/run/docker.sock
---
kind: Service
apiVersion: v1
metadata:
  name: jenkins
  namespace: jenkins
spec:
  selector:
    app: jenkins-master
  ports:
    - protocol: TCP
      port: 50000
      targetPort: 50000
      name: jnlp
    - protocol: TCP
      port: 8080
      targetPort: 8080
      name: ui
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: jenkins
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: jenkins
  namespace: jenkins
rules:
  - apiGroups: ["extensions"]
    resources: ["deployments", "replicasets"]
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
  - apiGroups: [""]
    resources: ["pods/exec", "pods"]
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "create"]
  - apiGroups: [""]
    resources: ["namespace", "namespaces"]
    verbs: ["get", "patch", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: jenkins
  namespace: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins
subjects:
  - kind: ServiceAccount
    name: jenkins
    namespace: jenkins
